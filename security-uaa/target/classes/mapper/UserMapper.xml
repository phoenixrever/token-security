<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.phoenixhell.securityuaa.mapper.UserMapper">

<!--        <select id="getGrantedAuthorities1" resultType="java.lang.String">-->
<!--         SELECT-->
<!--          u.`username`,-->
<!--          u.`fullname`,-->
<!--          r.`role_name`,-->
<!--          p.`code`,-->
<!--          p.`description`,-->
<!--          p.`url`-->
<!--        FROM-->
<!--          USER u-->
<!--          JOIN user_role ur-->
<!--            ON u.`id` = ur.`user_id`-->
<!--          JOIN role r-->
<!--            ON r.`id` = ur.`role_id`-->
<!--          JOIN role_permission rp-->
<!--            ON rp.`role_id` = r.`id`-->
<!--          JOIN permission p-->
<!--            ON p.`id` = rp.`permission_id`-->
<!--        WHERE u.`username` = #{username}-->
<!--    </select>-->

    <!--SELECT permission FROM sys_menu WHERE permission IS NOT NULL AND menu_id IN(-->
    <!--SELECT menu_id FROM sys_roles_menus WHERE role_id IN(-->
    <!--SELECT role_id FROM sys_role WHERE role_id IN(-->
    <!--SELECT role_id FROM sys_users_roles WHERE user_id IN (-->
    <!--SELECT user_id FROM sys_user WHERE username=#{username}-->
    <!--)-->
    <resultMap type="com.phoenixhell.securityuaa.entity.RoleEntity$PermissionVo" id="permissionMap">
        <result property="permissionId" column="menu_id"/>
        <result property="name" column="title"/>
        <result property="permission" column="permission"/>
    </resultMap>

    <select id="getGrantedAuthorities" resultMap="permissionMap">
         SELECT menu_id,permission FROM sys_menu WHERE permission IS NOT NULL AND menu_id IN(
             SELECT menu_id FROM sys_roles_menus WHERE role_id IN(
                 SELECT role_id FROM sys_role WHERE role_id IN(
                     SELECT role_id FROM sys_users_roles WHERE user_id =#{userId}
                 )
             )
         )
    </select>

    <!--
               collection：指定要遍历的集合：
                   list类型的参数会特殊处理封装在map中，map的key就叫list
               item：将当前遍历出的元素赋值给指定的变量
               separator:每个元素之间的分隔符
               open：遍历出所有结果拼接一个开始的字符
               close:遍历出所有结果拼接一个结束的字符
               index:索引。遍历list的时候是index就是索引，item就是当前值
                             遍历map的时候index表示的就是map的key，item就是map的值

               #{变量名}就能取出变量的值也就是当前遍历出的元素
                                collection 默认是list 或者map ids 需要@param("ids")
             -->

    <select id="getAuthoritiesByRole" resultMap="permissionMap">
<!--            不能这样子写 缓存不好维护(更新)-->
<!--        SELECT DISTINCT permission FROM sys_menu WHERE permission IS NOT NULL AND menu_id IN(-->
<!--        SELECT menu_id FROM sys_roles_menus WHERE role_id IN(-->
<!--        SELECT role_id FROM sys_role WHERE `name` IN-->
<!--        <foreach collection="roles" item="role_name" separator=","-->
<!--                 open="(" close=")">-->
<!--            #{role_name}-->
<!--        </foreach>-->
<!--            )-->
<!--        )-->
        SELECT DISTINCT menu_id,title,permission FROM sys_menu WHERE permission IS NOT NULL AND menu_id IN(
            SELECT menu_id FROM sys_roles_menus WHERE role_id IN(
                SELECT role_id FROM sys_role WHERE name =#{role}
             )
        )
    </select>
</mapper>
